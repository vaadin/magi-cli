#!/usr/bin/env node
'use strict';

const program = require('commander');
const fs = require('fs');
const rimraf = require('rimraf');

function info(msg) {
  console.log(' [magi] üåÄ  \x1b[36m%s\x1b[0m ...', msg);
}

function done(msg) {
  console.log(' [magi] üéâ  \x1b[33m%s\x1b[0m \n', msg.replace(/(https?:[^\s]+)/, '\x1b[32m $1\x1b[0m'));
}

function error(msg) {
  console.log(' [magi] ‚ö†Ô∏è  ‚ö†Ô∏è  \x1b[31m%s\x1b[0m ‚ö†Ô∏è  ‚ö†Ô∏è \n', msg);
}

program
  .arguments('<version>')
  .option('--draft', 'Create the release in draft mode')
  .option('--skip-npm', 'Skip p3 conversion and npm deployment')
  .option('--skip-cdn', 'Skip demo server deployment')
  .option('--skip-webjar', 'Skip webjar deployment')
  .parse(process.argv);

if (program.args.length < 1) {
  error('not enough arguments, expected <version>');
  process.exit(1);
}

const {exe, ask, workingPackage, elementName} = require('../lib/tools.js');
const {getGitHubApi} = require('../lib/github-api.js');

async function main(version) {
  // Detect if the component is P2 or "next"
  const isP2 = fs.existsSync('bower.json');

  if (isP2) {
    /* Check if Bower dependencies have correct ranges */
    try {
      await exe('magi check-bower');
    } catch (e) {
      throw new Error('Incorrect dependency version range found. Cannot release');
    }
  }

  /* Read current version */
  const jsonfile = require('jsonfile');
  const packageJson = jsonfile.readFileSync('package.json');

  /* open repository connection in GH */
  const gh = await getGitHubApi(program.auth);
  const [user, repo] = workingPackage.repository.split('/');
  const repository = gh.getRepo(user, repo);

  /* We use current branch not necessarily `master` */
  let branch = (await exe('git symbolic-ref --short HEAD', true)).trim();

  /* Check if newVersion is already tagged and pushed to GH */
  const previousVersion = packageJson.version;
  const newVersion = version.replace(/^v/, '');
  let pushToGH = true;
  if (previousVersion === newVersion) {
    done(`Already committed version v${newVersion}`);
    await repository.listTags().then(response => {
      // Decide whether push to github if there is no tag with this version number
      pushToGH = response.data.filter(tag => tag.name.replace(/^v/, '') == newVersion).length === 0;
    });
  } else {
    info(`Creating ${newVersion} tag and commit`);
    await exe(`npm version ${newVersion}`, true);
  }

  const tagUrl = `https://github.com/${workingPackage.repository}/blob/v${newVersion}/package.json`;
  if (pushToGH) {
    info(`Push tag and commit to branch ${branch} in github`);
    await exe(`git push origin HEAD v${newVersion}`, true);
    done(`Tagged in GH at: ${tagUrl}`);
  } else {
    done(`Already Tagged in GH at: ${tagUrl}`);
  }

  /* Check if version has already released in GH */
  let releaseUrl;
  let lastReleaseVersion = previousVersion;
  let draft = !!program.draft;
  await repository.listReleases().then(response => {
    const releases = response.data;
    const latestRelease = releases.find(release => !release.draft);
    if (latestRelease) {
      // figure out the last release (first in the list that is not draft)
      lastReleaseVersion = latestRelease.tag_name.replace(/^v/, '');
      // Check if new version has already a release
      const release = releases.find(release => release.tag_name.replace(/^v/, '') == newVersion);
      release && (releaseUrl = release.html_url, draft = release.draft);
    }
  });

  if (releaseUrl) {
    done(`Release Already Created at: ${releaseUrl}`);
  } else {
    info('Generating Release Notes');
    const releaseNotes = await exe(`magi release-notes v${lastReleaseVersion} v${newVersion}`, true);

    const releaseOptions = {
      "tag_name": `v${newVersion}`,
      "target_commitish": branch,
      "name": `v${newVersion}`,
      "body": releaseNotes,
      "draft": draft,
      "prerelease": false
    }
    info('Creating and pushing the release');
    await repository.createRelease(releaseOptions, (ignore, data) => {
      releaseUrl =  data.html_url;
      done(`Release created at: ${data.html_url}`);
    });
  }

  // If version is saved as a draft we wait until user modifies notes and releases version
  if (draft) {
    releaseUrl = releaseUrl.replace(/(.*)\/tag\/(.*)/, '$1/edit/$2');
    done(`You can modify release notes at: ${releaseUrl}`);
    if (program.skipWebjar) {
      await ask('    Press Enter once you are done with the release notes...');
    } else {
      await ask('    Remember to click on `Publish Release`, otherwise webjar will fail.\n    Press Enter once you are done with the release notes...');
    }
  }

  /* Check whether this version is already published in npm */
  if (program.skipNpm) {
    info('Skipping npm Release');
  } else {
    let npmInfo;
    try {
      npmInfo = await exe(`npm info ${workingPackage.name}@${newVersion}`, true);
    } catch (ignore) {
    }
    let npmUrl = `https://www.npmjs.com/package/${workingPackage.name}`;

    if (npmInfo) {
      done(`Release Already deployed in npm: ${npmUrl}`);
    } else {
      // P2 component: convert to P3
      if (isP2) {
        info('Converting to polymer 3');
        rimraf.sync('node_modules');
        await exe('magi p3-convert --out . --import-style=name');
        done('Converted to Polymer 3');
      }

      info('Publishing to npm');
      if (branch === 'master') {
        const next = /(alpha|beta|pre|rc)[.]*[0-9]+$/;
        const tag = next.test(newVersion) ? 'next' : 'latest';
        await exe(`npm publish --access public --tag ${tag}`);
        done(`Deployed to npm: ${npmUrl} with tag ${tag}`);
      } else {
        // Backported patch releases
        await exe(`npm publish --access public`);
        done(`Deployed to npm: ${npmUrl}`);
      }

      // P2 component: restore master
      if (isP2) {
        info('Reverting P3 back to P2');
        await exe('git reset --hard HEAD^', true);
        await exe('git clean -fd', true);
      }
    }
  }

  /* CDN */
  if (!fs.existsSync('index.html') || program.skipCdn) {
    info('Skipping CDN Deployment');
  } else {
    info('Deploying to demo server');
    const args = isP2 ? '' : '--next';
    await exe(`magi deploy v${newVersion}${args}`);
    done(`Deployed in CDN at: https://cdn-origin.vaadin.com/${elementName}/${newVersion}/`);
  }

  /* WebJar */
  if (program.skipWebjar || !isP2) {
    info('Skipping Webjar Deployment');
  } else {
    info('Deploying to webjar');
    draft = true;
    await repository.listReleases().then(response => {
      const release = response.data.find(release => release.tag_name.replace(/^v/, '') == newVersion);
      release && (draft = release.draft);
    });
    if (draft) {
      throw new Error('Cannot deploy webjar while there is no release in GH or it is in draft mode');
    } else {
      await exe(`magi webjar v${newVersion}`);
      done(`Deployed in MAVEN at: https://dl.bintray.com/webjars/maven/org/webjars/bowergithub/${workingPackage.repository}/${newVersion}`);
    }
  }

  done(`!!! üòÉ ELEMENT: ${elementName} VERSION: ${newVersion} Successfully Released and Deployed üòÉ !!!`);
}

main(...program.args)
  .then(() => process.exit(0))
  .catch((e) => {
    error(e);
    process.exit(1);
  });
