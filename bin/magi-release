#!/usr/bin/env node
'use strict';

const program = require('commander');
const readline = require('readline');
const fs = require('fs');

program
  .arguments('<version>')
  .parse(process.argv);

if (program.args.length < 1) {
  console.error('not enough arguments, expected <version>');
  process.exit(1);
}

const {exe, ask, workingPackage, elementName} = require('../lib/tools.js');
const {getGitHubApi} = require('../lib/github-api.js');

async function main(version) {

  /* Read current version */
  const jsonfile = require('jsonfile');
  const packageJson = jsonfile.readFileSync('package.json');
  const previousVersion = packageJson.version;

  const newVersion = version.replace(/^v/, '');
  if (previousVersion === newVersion) {
    console.error(`The new version cannot be the same to the previous version ${previousVersion}`);
    process.exit(1);
  }

  console.log(`Creating ${newVersion} tag and commit`);
  await exe(`npm version ${newVersion}`, true);

  const gh = await getGitHubApi(program.auth);
  console.log('Push tag and commit to github');
  await exe('git push origin master', true);
  await exe('git push origin master --tags', true);
  console.log(`Tagged in GH at: https://github.com/${workingPackage.repository}/blob/v${newVersion}/package.json`);

  console.log('Generating Release Notes');
  const releaseNotes = await exe(`magi release-notes v${previousVersion} v${newVersion}`, true);

  const releaseOptions = {
    "tag_name": `v${newVersion}`,
    'target_commitish': 'master',
    "name": `v${newVersion}`,
    "body": releaseNotes,
    "draft": true,
    "prerelease": false
  }

  var [user, repo] = workingPackage.repository.split('/');
  const repository = gh.getRepo(user, repo);

  console.log('Creating and pushing the release');
  await repository.createRelease(releaseOptions, (ignore, data) => {
    const url = data.html_url.replace(/(.*)\/tag\/(.*)/, '$1/edit/$2');
      console.log('Release created, you can modify release notes at: ', url);
  });

  await ask('Press Enter once you are done with the release notes...');

  console.log('Update dependencies');
  await exe('rm -fr bower_components node_modules', true);
  await exe('bower install', true);

  console.log('Converting to polymer 3');
  await exe('magi p3-convert --out . --import-style=name');

  console.log('Publishing to npm', true);
  await exe('npm publish --access public');
  console.log(`Deployed in NPM at: https://www.npmjs.com/package/${workingPackage.name}`);

  console.log('Reverting P3 back to P2');
  await exe('git reset --hard HEAD^', true);
  await exe('git clean -fd', true);

  console.log('Updating dependencies');
  await exe('rm -fr bower_components node_modules', true);
  await exe('bower i', true);
  await exe('npm i', true);

  console.log('Deploying to demo server');
  await exe(`magi deploy v${newVersion}`);
  console.log(`Deployed in CDN at: https://cdn.vaadin.com/${elementName}/${newVersion}/demo/`);

  console.log('Deploying to webjar');
  await exe(`magi webjar v${newVersion}`);
  console.log(`Deployed in MAVEN at: https://dl.bintray.com/webjars/maven/org/webjars/bowergithub/${workingPackage.repository}/${newVersion}`);
}

main(...program.args)
  .then(() => process.exit(0))
  .catch((e) => {
    console.error(e);
    process.exit(1);
  });
