#!/usr/bin/env node
'use strict';

const {workingPackage} = require('../lib/tools.js');
const {EOL} = require('os');
const {files, from, to} = require('../lib/p3-post.js')
const path = require('path');
const fs = require('fs');
const jsonfile = require('jsonfile');
const replace = require('replace-in-file');
const child_process = require('child_process');
const rimraf = require('rimraf');

function runSync(cmd) {
  cmd = cmd.trim();
  const result = child_process.spawnSync(cmd, {
    shell: true,
    stdio: 'inherit'
  });
  if (result.status !== 0) {
    throw 'Unexpected error when running: ' + cmd;
  }
}

async function main() {
  // Check for clean git repo first
  try {
    runSync('git diff-index --quiet --cached HEAD --');
    runSync('git diff-files --quiet');
  } catch(e) {
    throw 'Error: expected working directory to have clean git repository state';
  }

  // Delete husky config in package.json
  delete workingPackage.husky;

  // Delete devDependencies in package.json
  delete workingPackage.devDependencies;

  // Delete scripts in package.json
  delete workingPackage.scripts;

  // Format and write changes to package.json
  jsonfile.writeFileSync('package.json', workingPackage, {spaces: 2});
  runSync('git add package.json');

  // Remove gulpfile.js, if present
  runSync('git rm --ignore-unmatch gulpfile.js');

  // Visit all source files and replace MAGI markers
  replace.sync({
    files: ['*.js', '*.html', 'src/*', 'demo/*', 'test/*', 'test/visual/*', 'theme/*/*'],
    from: [/.*MAGI ADD (START|END).*\n/g, /.*MAGI REMOVE START[\s\S]*?MAGI REMOVE END.*\n/g],
    to: ''
  });

  // Modify bower.json and demo/demos.json files
  const demosJson = jsonfile.readFileSync('demo/demos.json', {throws: false});
  const bowerJson = jsonfile.readFileSync('bower.json');

  if (demosJson) {
    bowerJson.main = bowerJson.main || [];
    bowerJson.main = Array.isArray(bowerJson.main) ? bowerJson.main : [bowerJson.main];

    (demosJson.pages || []).forEach(page => {
      // Add demo page to bower.json main to modulize them
      bowerJson.main.push('demo/' + page.src);
      // Change demo path from .html to .js
      page.src = page.src.replace(/\.html$/, '.js');
    });

    jsonfile.writeFileSync('demo/demos.json', demosJson, {spaces: 2});
    runSync('git add demo/demos.json');
  }

  const hasPolymerDependency = bowerJson.dependencies && bowerJson.dependencies.polymer;
  if (hasPolymerDependency) {
    // TODO(web-padawan): revert commit once the next 2.x release after 2.6.0 lands
    const pinPolymer = '5f5d2c2';
    bowerJson.dependencies.polymer = `Polymer/polymer#${pinPolymer}`;
    const resolutions = bowerJson.resolutions || {};
    bowerJson.resolutions = {...resolutions, polymer: `${pinPolymer}`};
  }

  jsonfile.writeFileSync('bower.json', bowerJson, {spaces: 2});

  runSync('git add bower.json');
  rimraf.sync('bower_components');
  runSync('bower install');

  // Try commit changes
  try {
    runSync('git commit -m "magi-cli: prepare for modulizer" -a');
  } catch(e) {
    // Commit failed. This is fine...
  }

  // Load custom dependency-map.json and generate dependency mapping string
  const dependencyMap = require('../dependency-map.json');
  let dmStrings = Object.entries(dependencyMap)
    .map(([from, to]) => `${from},${to.npm},${to.semver}`);

  // Append bower dependendies to dependency mapping
  dmStrings = dmStrings.concat(
    Object.entries(bowerJson.devDependencies)
    .concat(Object.entries(bowerJson.dependencies))
    .filter(([from, to]) => {
      return /^vaadin-/.test(from);
    })
    .map(([from, to]) => `${from},@vaadin/${from},${to.replace(/^.*#/, '')}`)
  );

  // Convert P2 to P3
  runSync(`
    modulizer \
      --dependency-mapping ${dmStrings.join(' ')} \
      --delete-files bower.json \
      ${process.argv.slice(2).join(' ')} \
  `);

  // check that conversion went well and the primary entry point is there
  const packageJson = JSON.parse(fs.readFileSync('package.json'));
  if (!fs.existsSync(packageJson.main)) {
    throw `⚠️ Something went wrong during P3 convert, ${packageJson.main} wasn't found.`;
  }

  // Set default values for replacements
  const postProcess = {files, from, to};

  // Run custom project adjustments
  let postFile = 'magi-p3-post.json';
  let magiPost = jsonfile.readFileSync(postFile, {throws: false});
  if (!magiPost) {
    try {
      postFile = 'magi-p3-post.js';
      magiPost = require(path.join(process.cwd(), postFile));
    } catch(e) {
    }
  }

  if (magiPost) {
    magiPost.files = [...postProcess.files, ...magiPost.files];
    magiPost.from = [...postProcess.from, ...magiPost.from];
    magiPost.to = [...postProcess.to, ...magiPost.to];
  } else {
    magiPost = postProcess;
  }

  // magiPost json is a valid options object for 'replace-in-file'
  replace.sync(magiPost);

  const filesToRemove = magiPost.remove || [];
  // we don't need "magi-p3-post" anymore
  if (fs.existsSync(postFile)) {
    filesToRemove.push(postFile);
  }
  filesToRemove.forEach(file => fs.unlinkSync(file));
}

main()
  .then(() => process.exit(0))
  .catch((e) => {
    console.error(e);
    process.exit(1);
  });
