#!/usr/bin/env node
'use strict';

const {workingPackage} = require('../lib/tools.js');
const {EOL} = require('os');
const path = require('path');
const fs = require('fs');

function serializeJson(json) {
  return JSON.stringify(json, undefined, 2).split('\n').join(EOL) + EOL;
}

const child_process = require('child_process');
function runSync(cmd) {
  const result = child_process.spawnSync(cmd, {
    shell: true,
    stdio: 'inherit'
  });
  if (result.status !== 0) {
    throw 'Unexpected error when running: ' + cmd;
  }
}

async function main() {
  // Check for clean git repo first
  try {
    runSync('git diff-index --quiet --cached HEAD --');
    runSync('git diff-files --quiet');
  } catch(e) {
    throw 'Error: expected working directory to have clean git repository state';
  }

  // Delete devDependencies in package.json
  delete workingPackage.devDependencies;

  // Delete scripts in package.json
  delete workingPackage.scripts;

  // Format and write changes to package.json
  fs.writeFileSync(
    path.resolve(process.cwd(), 'package.json'),
    serializeJson(workingPackage)
  );
  runSync('git add package.json');

  // Remove gulpfile.js, if present
  try {
    fs.accessSync(
      path.resolve(process.cwd(), 'gulpfile.js'),
      fs.constants.R_OK | fs.constants.W_OK
    );
    runSync('git rm gulpfile.js');
  } catch(e) { }

  // Change src paths of demo pages from .html to .js in demo/demos.json,
  // collect demo paths to include in modulizer
  const demoPaths = [];
  try {
    const demosJsonPath = path.resolve(process.cwd(), 'demo/demos.json');
    fs.accessSync(demosJsonPath, fs.constants.R_OK | fs.constants.W_OK);
    const demosJson = require(demosJsonPath);
    (demosJson.pages || []).forEach(page => {
      demoPaths.push('demo/' + page.src);
      page.src = page.src.replace(/\.html$/, '.js');
    });
    fs.writeFileSync(demosJsonPath, serializeJson(demosJson));
    runSync('git add demo/demos.json');
  } catch(e) { }

  const bowerJsonPath = path.resolve(process.cwd(), 'bower.json');
  const bowerJson = require(bowerJsonPath);

  // If demo pages are present, add them to bower.json main to modulize them
  if (demoPaths.length) {
    if (bowerJson.main) {
      if (!Array.isArray(bowerJson.main)) {
        bowerJson.main = [bowerJson.main];
      }
    } else {
      bowerJson.main = [];
    }
    bowerJson.main = bowerJson.main.concat(demoPaths);
  }

  // TODO(web-padawan): revert commit once the next 2.x release after 2.6.0 lands
  const pinPolymer = '5f5d2c2';
  bowerJson.dependencies.polymer = `Polymer/polymer#${pinPolymer}`;
  bowerJson.resolutions = {polymer: `${pinPolymer}`};

  fs.writeFileSync(bowerJsonPath, serializeJson(bowerJson));
  runSync('git add bower.json');

  runSync('rm -rf bower_components && bower i');

  // Try commit changes
  try {
    runSync('git commit -m "magi-cli: prepare for modulizer"');
  } catch(e) {
    // Commit failed. This is fine...
  }

  // Load custom dependency-map.json and format
  const dependencyMap = require('../dependency-map.json');
  const dmStrings = Object.entries(dependencyMap)
    .map(([from, to]) => `${from},${to.npm},${to.semver}`);

  // Finally,
  runSync(`
    modulizer \
      --dependency-mapping ${dmStrings.join(' ')} \
      --delete-files bower.json \
      ${process.argv.slice(2).join(' ')} \
  `);
}

main()
  .then(() => process.exit(0))
  .catch((e) => {
    console.error(e);
    process.exit(1);
  });
